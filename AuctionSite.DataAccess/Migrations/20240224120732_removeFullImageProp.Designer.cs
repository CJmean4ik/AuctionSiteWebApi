// <auto-generated />
using System;
using AuctionSite.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuctionSite.DataAccess.Migrations
{
    [DbContext(typeof(AuctionDbContext))]
    [Migration("20240224120732_removeFullImageProp")]
    partial class removeFullImageProp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.BetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<int>("CommentsId")
                        .HasColumnType("int");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CommentsId")
                        .IsUnique();

                    b.HasIndex("LotId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.CommentsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BetId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.LotEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePreview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WhoCreatedUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Lots");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.ReplyCommentsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentsId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentsId");

                    b.ToTable("ReplyComments");
                });

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.SpecificLotEntity", b =>
                {
                    b.HasBaseType("AuctionSite.DataAccess.Entities.LotEntity");

                    b.Property<int?>("DurationSale")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LotStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("EntityId");

                    b.ToTable("LotConcrete");
                });

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.BuyerEntity", b =>
                {
                    b.HasBaseType("AuctionSite.DataAccess.Entities.UserEntity");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Buyer");
                });

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.BetEntity", b =>
                {
                    b.HasOne("AuctionSite.DataAccess.Entities.BuyerEntity", "Buyer")
                        .WithMany("Bets")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionSite.DataAccess.Entities.CommentsEntity", "Comments")
                        .WithOne("Bet")
                        .HasForeignKey("AuctionSite.DataAccess.Entities.BetEntity", "CommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionSite.DataAccess.Entities.SpecificLotEntity", "Lot")
                        .WithMany("Bets")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Comments");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.ReplyCommentsEntity", b =>
                {
                    b.HasOne("AuctionSite.DataAccess.Entities.CommentsEntity", "Comments")
                        .WithMany("ReplyComments")
                        .HasForeignKey("CommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.SpecificLotEntity", b =>
                {
                    b.HasOne("AuctionSite.DataAccess.Entities.BuyerEntity", "Entity")
                        .WithMany("LotEntities")
                        .HasForeignKey("EntityId");

                    b.HasOne("AuctionSite.DataAccess.Entities.LotEntity", null)
                        .WithOne()
                        .HasForeignKey("AuctionSite.DataAccess.Entities.SpecificLotEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.BuyerEntity", b =>
                {
                    b.HasOne("AuctionSite.DataAccess.Entities.UserEntity", null)
                        .WithOne()
                        .HasForeignKey("AuctionSite.DataAccess.Entities.BuyerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.CommentsEntity", b =>
                {
                    b.Navigation("Bet");

                    b.Navigation("ReplyComments");
                });

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.SpecificLotEntity", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("AuctionSite.DataAccess.Entities.BuyerEntity", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("LotEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
